set Factories; /*Üzemek*/
set Shops; /*Boltok*/
set Days; /*Napok*/
set Products; /*Gyártott Termékek*/

param OpeningTimes{D in Days,S in Shops}; /*Boltok napi nyitása*/
param WorkStarting{D in Days,F in Factories}; /*Üzemek napi kezdése*/
param Price{P in Products}; /*Egy termékfajta ára*/
param Distance{F in Factories,S in Shops}; /*Üzemek és Boltok távolsága*/
param Demand{S in Shops,P in Products}; /*Boltok kereslete*/
param Consumption; /*Autó fogyasztása*/
param FuelCost; /*Üzemanyag aktuális ára*/
param ProductionTime{P in Products}; /*Egy termék eloállításának idotartama*/
param ProductDeadline{P in Products}; /*Termékek elkészítésének határideje*/
param AvgSpeed;
param MinProductNumber;
param BigM:=150; 


var Produce{D in Days,F in Factories,P in Products},integer; /*Adott napon adott üzem adott termékbol mennyit gyárt*/
var Deliver{D in Days,F in Factories,S in Shops,P in Products},integer>=0;/*Adott napon adott üzem adott boltba adott termékbol mennyit szállít*/
var DailyDelivery{D in Days,F in Factories,S in Shops},integer;/*Adott napon adott üzem adott boltba összesen hány terméket szállít*/
var ExistingDelivery{D in Days,F in Factories,S in Shops},binary;/*Adott napon adott üzem adott boltba szállít-e?*/
var Start{D in Days,F in Factories,P in Products}>=0;/*Adott napon adott üzemben termékfajták gyártásának kezdeti ideje*/
var Finish{D in Days,F in Factories,P in Products}>=0;/*Adott napon adott üzemben termékfajták gyártásának befejezési ideje*/
var Prec{D in Days,P1 in Products,P2 in Products,F in Factories},binary;/*Adott napon adott üzemben termékfajták precedenciája*/
var Alloc{D in Days,P in Products,F in Factories}, binary;/*Adott napon adott üzemben termékfajták gyártásának allokációja*/
var ProductionTimeProductSum{D in Days,P in Products,F in Factories};/*Adott napon adott üzemben adott termékfajtára fordított össz. ido*/
var ProductionTimeFactorySum{D in Days,F in Factories};/*Adott napon adott üzemben a teljes termelésre fordított össz. ido*/



s.t. production_matching_demand{D in Days,P in Products}:
	sum{F in Factories}(Produce[D,F,P])=sum{S in Shops}(Demand[S,P]);/*Napi igényt ki kell elégíteni.*/

s.t. deliveries{D in Days,S in Shops,P in Products}:
	Deliver[D,'F1',S,P]+Deliver[D,'F2',S,P]=Demand[S,P];/*Napi igényt a boltba el is kell juttatni.*/

s.t. deliver_only_avalible{D in Days,P in Products,F in Factories}:
	sum{S in Shops}(Deliver[D,F,S,P])=Produce[D,F,P];/*Csak azt lehet elszállítani, amit meg is termeltünk.*/

s.t. daily_delivery_sum{D in Days,F in Factories,S in Shops}:
	sum{P in Products}(Deliver[D,F,S,P])=DailyDelivery[D,F,S];/*Segédváltozó kiszámolása.*/

s.t. daily_delivery_min{D in Days,F in Factories,S in Shops}:
	DailyDelivery[D,F,S]>=MinProductNumber*ExistingDelivery[D,F,S];/*Minimum n-db süteményt kell szállítanunk. Külön 1db-ot nem viszünk el egy fajtából.*/

s.t. delivery_routes{D in Days,F in Factories,S in Shops}:
	ExistingDelivery[D,F,S]*sum{P in Products}(Demand[S,P])>=DailyDelivery[D,F,S];/*Melyik szállítási útvonal létezik valójában.*/

s.t. allocation{D in Days,P in Products}:
	sum{F in Factories} Alloc[D,P,F]*sum{S in Shops}(Demand[S,P])>=sum{S in Shops}(Demand[S,P]);/*Termékek allokációja az üzemekhez.*/

s.t. production_matching_allocation{D in Days,P in Products,F in Factories}:
	Alloc[D,P,F]*BigM>=Produce[D,F,P];/*Nincs allokálva, ha nem termelünk.*/

s.t. production_time_per_product_per_factory{D in Days,P in Products,F in Factories}:
	Produce[D,F,P]*ProductionTime[P]=ProductionTimeProductSum[D,P,F];/*Segédváltozó kiszámolása.*/

s.t. sequencing{D in Days,F in Factories,P1 in Products,P2 in Products: P1!=P2}:
	Prec[D,P1,P2,F]+Prec[D,P2,P1,F]>=Alloc[D,P1,F]+Alloc[D,P2,F]-1;/*Gyártási sorrend üzemenként.*/

s.t. timing{D in Days,F in Factories,P1 in Products, P2 in Products: P1!=P2}:
	Start[D,F,P2] >= Finish[D,F,P1] - BigM * (1 - Prec[D,P1,P2,F]);/*Amelyik megelozi a másikat,annak elobb vége, mint a másik kezdete.*/

s.t. processing_time{D in Days,F in Factories,P in Products}:
	Finish[D,F,P]=Start[D,F,P]+Produce[D,F,P]*ProductionTime[P];/*Idozítések kiszámítása üzemenként.*/

s.t. deadlines{D in Days,F in Factories,P in Products}:
	Finish[D,F,P]<=ProductDeadline[P];/*Termékek gyártását határidõ elõtt be kell fejezni.*/

s.t. production_time_per_factory{D in Days,F in Factories}:
	sum{P in Products}(ProductionTimeProductSum[D,P,F])=ProductionTimeFactorySum[D,F];/*Üzemenkénti összes termelés idotartama.*/

s.t. deliver_in_time{D in Days,F in Factories,S in Shops}:
	WorkStarting[D,F]+ProductionTimeFactorySum[D,F]+(Distance[F,S]/AvgSpeed)<=OpeningTimes[D,S]+BigM*(1-(ExistingDelivery[D,F,S]));
/*Abban az esetben, ha az adott üzem szállít adott boltba, akkor az összes termeléssel és szállítással el kell készülnünk az elott, hogy a bolt kinyitna.*/

maximize profit{D in Days}: sum{P in Products,F in Factories,S in Shops}(Deliver[D,F,S,P]*Price[P])-sum{F in Factories,S in Shops}(ExistingDelivery[D,F,S]*Distance[F,S]*(Consumption/100)*FuelCost);

solve;

printf "\n\nDaily Product Deliveries:\n\n";
for {D in Days}{
	printf "%4s\n",D;
	printf "---------------------------------------\n";
	printf "    ";
	for {S in Shops} printf "%12s",S;
	printf "\n";
	for {F in Factories}{
		printf "%s",F;
		for {S in Shops} printf "%12d\t",DailyDelivery[D,F,S];
		printf "\n";
	}
	printf "---------------------------------------\n\n";
}

printf "\n\nDaily Deliveries:\n\n";
for {D in Days}{
	printf "%4s\n",D;
	printf "---------------------------------------\n";
	printf "    ";
	for {S in Shops} printf "%12s",S;
	printf "\n";
	for {F in Factories}{
		printf "%s",F;
		for {S in Shops} printf "%12d\t",ExistingDelivery[D,F,S];
		printf "\n";
	}
	printf "---------------------------------------\n\n";
}

printf "\n\nDaily Deliveries Per Product:\n\n";
for {D in Days}{
	printf "%4s\n",D;
	printf "*************************************************\n";
	for {P in Products}{
		printf "%4s\n",P;
		printf "---------------------------------------\n";
		printf "    ";
		for {S in Shops} printf "%12s",S;
		printf "\n";
		for {F in Factories}{
			printf "%s",F;
			for {S in Shops} printf "%12d\t",Deliver[D,F,S,P];
			printf "\n";
		}
		printf "---------------------------------------\n\n";
	}
}

printf "\n\nDaily Production Per Product:\n\n";
for {P in Products}{
	printf "%4s\n",P;
	printf "*************************************************\n";
	printf "           ";
	for{D in Days} printf"%s\t   ",D;
	printf "\n";
	for {F in Factories}{
		printf "%s",F;
		for{D in Days} printf "\t %4d",Produce[D,F,P];
		printf "\n";
	}
	printf "---------------------------------------\n\n";
}

printf "\n\nDaily Precedence Matrix:\n\n";
for {D in Days}{
	printf "%4s\n",D;
	printf "*************************************************\n";
	for {F in Factories}{
		printf "%s:\n",F;
		for {P in Products} printf "\t   %s",P;
		printf "\n";
		for {P1 in Products}{
			printf "%s\t\t",P1;
			for {P2 in Products} printf "%1d\t\t",Prec[D,P1,P2,F];
			printf "\n";
		}
		printf "\n";
	}
}
